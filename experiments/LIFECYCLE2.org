* Communication patterns
- Fuld load
- Partial load
- Action/Consumer callback
- Server websocket push

* Misc
- Timer
- Connect setup/teardown
- Offline handling
- Error handling
- History support
- Retry
- Concurrency control
- Delay
- Timeout

* Lifecycle events
- hypergen.full_render
- hypergen.partial_render
- hypergen.callback
- hypergen.server_push
- hypergen.morph
- hypergen.html_change

- hypergen.offline
- hypergen.online
- hypergen.callback_error

* Service
service_add(name, path, start=True)
service_start(name)
service_stop(name)

services = {}

class WebsocketService {
    // Public
    constructor(name) {
        document.addEventListener("hypergen.html_change", this.check_for_stop)
        this.name = name
        this.dependees = []
    }
    add()
    start()
    stop()
    add_dependee(dependee) {
        this.dependees(add)
    }

    // Custom
    check_for_stop() {
        this.dependees = this.dependees.filter(x => exists(x))
        if (!!this.dependees) this.stop()
    }
}

js.service_add("websocket::long_ass_group_name", ["hypergen.WebsocketService])
button(onclick=callback(act, 42, service_dependencies=["websocket::long_ass_group_name", "someother"]))
<button onclick="hypergen.event('/url/path/', [42], ['websocket::long_ass_group_name', 'someother'])"

* Scheduler configuration
- https://en.wikipedia.org/wiki/Schedule_(computer_science)
- https://cloud.google.com/appengine/docs/legacy/standard/go111/config/queueref
- https://en.wikipedia.org/wiki/Scheduling_(computing)#task_queue
- https://en.wikipedia.org/wiki/Multilevel_queue
- https://en.wikipedia.org/wiki/Job_scheduler
- https://docs.mojolicious.org/Minion/Guide
- https://www.npmjs.com/package/bee-queue#retrying
- https://rangle.io/blog/thinking-in-nested-streams-with-rxjs/

# lifecycle event types
EVENT-IN --> CALLBACK-START --> CALLBACK-END --> APPLY-COMMANDS-START --> APPLY-COMMANDS-END                            
                            --> CALLBACK-ERROR                        --> APPLY-COMMANDS-ERROR
                            --> OFFLINE-ERROR                         --> OFFLINE-ERROR

function step(queue, lifecycle_event_type, event, commands, meta) {

}
** Examples
R = Read value of input field
C = Communicate with server
D = Draw html
*** Autocomplete
T1   T2   T3
RX   
     RY
          RZ
          CZ
CX
     CY
     DY
          DZ
DX         

Debounced          
Send async
Draw ordered
*** Submit form
Serial
Block form input while submitting
*** Cross dependent fields
Async
Block other field until done
Draw ordered
** Misc
que1:
    callback_start_order = false
    callback_end_order = true
    apply_commands_start_order = true
    apply_commands_end_order = false
queu2:
    ...

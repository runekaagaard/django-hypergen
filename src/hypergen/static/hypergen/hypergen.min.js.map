{"version":3,"sources":["node_modules/morphdom/dist/morphdom-esm.js","node_modules/mousetrap/mousetrap.js","hypergen.js"],"names":["morphdom","range","DOCUMENT_FRAGMENT_NODE","morphAttrs","fromNode","toNode","toNodeAttrs","attr","attrName","attrNamespaceURI","attrValue","attributes","nodeType","i","length","name","namespaceURI","value","localName","getAttributeNS","prefix","setAttributeNS","getAttribute","setAttribute","fromNodeAttrs","d","hasAttributeNS","removeAttributeNS","hasAttribute","removeAttribute","NS_XHTML","doc","document","undefined","HAS_TEMPLATE_SUPPORT","createElement","HAS_RANGE_SUPPORT","createRange","createFragmentFromTemplate","str","template","innerHTML","content","childNodes","createFragmentFromRange","fragment","selectNode","body","createContextualFragment","createFragmentFromWrap","toElement","trim","compareNodeNames","fromEl","toEl","fromNodeName","fromCodeStart","toCodeStart","nodeName","toNodeName","charCodeAt","toUpperCase","createElementNS","moveChildren","curChild","firstChild","nextChild","nextSibling","appendChild","syncBooleanAttrProp","specialElHandlers","OPTION","parentNode","parentName","selected","selectedIndex","INPUT","TEXTAREA","newValue","oldValue","nodeValue","placeholder","SELECT","optgroup","ELEMENT_NODE","DOCUMENT_FRAGMENT_NODE$1","TEXT_NODE","COMMENT_NODE","noop","defaultGetNodeKey","node","id","morphdomFactory","options","toNodeHtml","getNodeKey","onBeforeNodeAdded","onNodeAdded","onBeforeElUpdated","onElUpdated","onBeforeNodeDiscarded","onNodeDiscarded","onBeforeElChildrenUpdated","childrenOnly","fromNodesLookup","Object","create","keyedRemovalList","addKeyedRemoval","key","push","removeNode","skipKeyedNodes","removeChild","walkDiscardedChildNodes","handleNodeAdded","el","unmatchedFromEl","replaceChild","morphEl","toElKey","morphChildren","curToNodeChild","curToNodeKey","curFromNodeKey","fromNextSibling","toNextSibling","matchingFromEl","curFromNodeChild","outer","isSameNode","curFromNodeType","isCompatible","insertBefore","onBeforeNodeAddedResult","actualize","ownerDocument","cleanupFromEl","specialElHandler","indexTree","morphedNode","morphedNodeType","toNodeType","len","elToRemove","window","hypergen","Array","isArray","obj","prototype","toString","call","morph","html","getElementById","focused","activeElement","type","files","mergeAttrs","script","forEach","replaceWith","indexOf","autofocus","querySelectorAll","focus","remove","hide","style","display","redirect","url","location","clientState","setClientState","at","split","path","assign","console","log","isBlocked","callback","args","debounce","confirm_","blocks","uploadFiles","params","meta","clear","elementId","debug","event","headers","preventDefault","stopPropagation","postIt","json","hypergenGlobalFormdata","FormData","hypergenUploadFiles","JSON","stringify","error","MISSING_ELEMENT_EXCEPTION","warn","formData","append","post","data","applyCommands","jsonOk","xhr","getResponseHeader","getElementsByTagName","confirm","throttle","delay","group","_THROTTLE_GROUPS","func","clearTimeout","setTimeout","cancelThrottle","require_","module","require","e","resolvePath","parts","part","bind","applyCommand","CustomEvent","detail","dispatchEvent","callbackKey","eventMatches","k","eventHandlerCallbacks","commands","target","source","getAttributeNames","coerce","no","int","parseInt","isNaN","float","parseFloat","_","date","datetime","time","month","year","week","replace","read","checked","radio","querySelector","file","element","valueFunc","coerceFunc","toJSON","reviver","v","getCookie","cookieValue","cookie","cookies","substring","decodeURIComponent","addParams","ret","encodeURIComponent","join","onSuccess","onError","XMLHttpRequest","progressBar","upload","onload","visibility","status","response","onerror","onabort","onprogress","loaded","total","parse","responseText","readyState","open","setRequestHeader","parent","pathname","send","addEventListener","state","callback_url","is_popstate","HYPERGEN_POPSTATE","href","pushstate","Event","onpushstate","replaceInText","pattern","replacement","Node","textContent","DOCUMENT_NODE","translations","T","t","a","b","b0","form","alert","help","stringsOnPage","filter","x","includes","list","xs","map","translate","Number","prompt","ready","fn","partial","attachEvent"],"mappings":"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","file":"hypergen.min.js","sourceRoot":"","sourcesContent":["var DOCUMENT_FRAGMENT_NODE = 11;\n\nfunction morphAttrs(fromNode, toNode) {\n    var toNodeAttrs = toNode.attributes;\n    var attr;\n    var attrName;\n    var attrNamespaceURI;\n    var attrValue;\n    var fromValue;\n\n    // document-fragments dont have attributes so lets not do anything\n    if (toNode.nodeType === DOCUMENT_FRAGMENT_NODE || fromNode.nodeType === DOCUMENT_FRAGMENT_NODE) {\n      return;\n    }\n\n    // update attributes on original DOM element\n    for (var i = toNodeAttrs.length - 1; i >= 0; i--) {\n        attr = toNodeAttrs[i];\n        attrName = attr.name;\n        attrNamespaceURI = attr.namespaceURI;\n        attrValue = attr.value;\n\n        if (attrNamespaceURI) {\n            attrName = attr.localName || attrName;\n            fromValue = fromNode.getAttributeNS(attrNamespaceURI, attrName);\n\n            if (fromValue !== attrValue) {\n                if (attr.prefix === 'xmlns'){\n                    attrName = attr.name; // It's not allowed to set an attribute with the XMLNS namespace without specifying the `xmlns` prefix\n                }\n                fromNode.setAttributeNS(attrNamespaceURI, attrName, attrValue);\n            }\n        } else {\n            fromValue = fromNode.getAttribute(attrName);\n\n            if (fromValue !== attrValue) {\n                fromNode.setAttribute(attrName, attrValue);\n            }\n        }\n    }\n\n    // Remove any extra attributes found on the original DOM element that\n    // weren't found on the target element.\n    var fromNodeAttrs = fromNode.attributes;\n\n    for (var d = fromNodeAttrs.length - 1; d >= 0; d--) {\n        attr = fromNodeAttrs[d];\n        attrName = attr.name;\n        attrNamespaceURI = attr.namespaceURI;\n\n        if (attrNamespaceURI) {\n            attrName = attr.localName || attrName;\n\n            if (!toNode.hasAttributeNS(attrNamespaceURI, attrName)) {\n                fromNode.removeAttributeNS(attrNamespaceURI, attrName);\n            }\n        } else {\n            if (!toNode.hasAttribute(attrName)) {\n                fromNode.removeAttribute(attrName);\n            }\n        }\n    }\n}\n\nvar range; // Create a range object for efficently rendering strings to elements.\nvar NS_XHTML = 'http://www.w3.org/1999/xhtml';\n\nvar doc = typeof document === 'undefined' ? undefined : document;\nvar HAS_TEMPLATE_SUPPORT = !!doc && 'content' in doc.createElement('template');\nvar HAS_RANGE_SUPPORT = !!doc && doc.createRange && 'createContextualFragment' in doc.createRange();\n\nfunction createFragmentFromTemplate(str) {\n    var template = doc.createElement('template');\n    template.innerHTML = str;\n    return template.content.childNodes[0];\n}\n\nfunction createFragmentFromRange(str) {\n    if (!range) {\n        range = doc.createRange();\n        range.selectNode(doc.body);\n    }\n\n    var fragment = range.createContextualFragment(str);\n    return fragment.childNodes[0];\n}\n\nfunction createFragmentFromWrap(str) {\n    var fragment = doc.createElement('body');\n    fragment.innerHTML = str;\n    return fragment.childNodes[0];\n}\n\n/**\n * This is about the same\n * var html = new DOMParser().parseFromString(str, 'text/html');\n * return html.body.firstChild;\n *\n * @method toElement\n * @param {String} str\n */\nfunction toElement(str) {\n    str = str.trim();\n    if (HAS_TEMPLATE_SUPPORT) {\n      // avoid restrictions on content for things like `<tr><th>Hi</th></tr>` which\n      // createContextualFragment doesn't support\n      // <template> support not available in IE\n      return createFragmentFromTemplate(str);\n    } else if (HAS_RANGE_SUPPORT) {\n      return createFragmentFromRange(str);\n    }\n\n    return createFragmentFromWrap(str);\n}\n\n/**\n * Returns true if two node's names are the same.\n *\n * NOTE: We don't bother checking `namespaceURI` because you will never find two HTML elements with the same\n *       nodeName and different namespace URIs.\n *\n * @param {Element} a\n * @param {Element} b The target element\n * @return {boolean}\n */\nfunction compareNodeNames(fromEl, toEl) {\n    var fromNodeName = fromEl.nodeName;\n    var toNodeName = toEl.nodeName;\n    var fromCodeStart, toCodeStart;\n\n    if (fromNodeName === toNodeName) {\n        return true;\n    }\n\n    fromCodeStart = fromNodeName.charCodeAt(0);\n    toCodeStart = toNodeName.charCodeAt(0);\n\n    // If the target element is a virtual DOM node or SVG node then we may\n    // need to normalize the tag name before comparing. Normal HTML elements that are\n    // in the \"http://www.w3.org/1999/xhtml\"\n    // are converted to upper case\n    if (fromCodeStart <= 90 && toCodeStart >= 97) { // from is upper and to is lower\n        return fromNodeName === toNodeName.toUpperCase();\n    } else if (toCodeStart <= 90 && fromCodeStart >= 97) { // to is upper and from is lower\n        return toNodeName === fromNodeName.toUpperCase();\n    } else {\n        return false;\n    }\n}\n\n/**\n * Create an element, optionally with a known namespace URI.\n *\n * @param {string} name the element name, e.g. 'div' or 'svg'\n * @param {string} [namespaceURI] the element's namespace URI, i.e. the value of\n * its `xmlns` attribute or its inferred namespace.\n *\n * @return {Element}\n */\nfunction createElementNS(name, namespaceURI) {\n    return !namespaceURI || namespaceURI === NS_XHTML ?\n        doc.createElement(name) :\n        doc.createElementNS(namespaceURI, name);\n}\n\n/**\n * Copies the children of one DOM element to another DOM element\n */\nfunction moveChildren(fromEl, toEl) {\n    var curChild = fromEl.firstChild;\n    while (curChild) {\n        var nextChild = curChild.nextSibling;\n        toEl.appendChild(curChild);\n        curChild = nextChild;\n    }\n    return toEl;\n}\n\nfunction syncBooleanAttrProp(fromEl, toEl, name) {\n    if (fromEl[name] !== toEl[name]) {\n        fromEl[name] = toEl[name];\n        if (fromEl[name]) {\n            fromEl.setAttribute(name, '');\n        } else {\n            fromEl.removeAttribute(name);\n        }\n    }\n}\n\nvar specialElHandlers = {\n    OPTION: function(fromEl, toEl) {\n        var parentNode = fromEl.parentNode;\n        if (parentNode) {\n            var parentName = parentNode.nodeName.toUpperCase();\n            if (parentName === 'OPTGROUP') {\n                parentNode = parentNode.parentNode;\n                parentName = parentNode && parentNode.nodeName.toUpperCase();\n            }\n            if (parentName === 'SELECT' && !parentNode.hasAttribute('multiple')) {\n                if (fromEl.hasAttribute('selected') && !toEl.selected) {\n                    // Workaround for MS Edge bug where the 'selected' attribute can only be\n                    // removed if set to a non-empty value:\n                    // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/12087679/\n                    fromEl.setAttribute('selected', 'selected');\n                    fromEl.removeAttribute('selected');\n                }\n                // We have to reset select element's selectedIndex to -1, otherwise setting\n                // fromEl.selected using the syncBooleanAttrProp below has no effect.\n                // The correct selectedIndex will be set in the SELECT special handler below.\n                parentNode.selectedIndex = -1;\n            }\n        }\n        syncBooleanAttrProp(fromEl, toEl, 'selected');\n    },\n    /**\n     * The \"value\" attribute is special for the <input> element since it sets\n     * the initial value. Changing the \"value\" attribute without changing the\n     * \"value\" property will have no effect since it is only used to the set the\n     * initial value.  Similar for the \"checked\" attribute, and \"disabled\".\n     */\n    INPUT: function(fromEl, toEl) {\n        syncBooleanAttrProp(fromEl, toEl, 'checked');\n        syncBooleanAttrProp(fromEl, toEl, 'disabled');\n\n        if (fromEl.value !== toEl.value) {\n            fromEl.value = toEl.value;\n        }\n\n        if (!toEl.hasAttribute('value')) {\n            fromEl.removeAttribute('value');\n        }\n    },\n\n    TEXTAREA: function(fromEl, toEl) {\n        var newValue = toEl.value;\n        if (fromEl.value !== newValue) {\n            fromEl.value = newValue;\n        }\n\n        var firstChild = fromEl.firstChild;\n        if (firstChild) {\n            // Needed for IE. Apparently IE sets the placeholder as the\n            // node value and vise versa. This ignores an empty update.\n            var oldValue = firstChild.nodeValue;\n\n            if (oldValue == newValue || (!newValue && oldValue == fromEl.placeholder)) {\n                return;\n            }\n\n            firstChild.nodeValue = newValue;\n        }\n    },\n    SELECT: function(fromEl, toEl) {\n        if (!toEl.hasAttribute('multiple')) {\n            var selectedIndex = -1;\n            var i = 0;\n            // We have to loop through children of fromEl, not toEl since nodes can be moved\n            // from toEl to fromEl directly when morphing.\n            // At the time this special handler is invoked, all children have already been morphed\n            // and appended to / removed from fromEl, so using fromEl here is safe and correct.\n            var curChild = fromEl.firstChild;\n            var optgroup;\n            var nodeName;\n            while(curChild) {\n                nodeName = curChild.nodeName && curChild.nodeName.toUpperCase();\n                if (nodeName === 'OPTGROUP') {\n                    optgroup = curChild;\n                    curChild = optgroup.firstChild;\n                } else {\n                    if (nodeName === 'OPTION') {\n                        if (curChild.hasAttribute('selected')) {\n                            selectedIndex = i;\n                            break;\n                        }\n                        i++;\n                    }\n                    curChild = curChild.nextSibling;\n                    if (!curChild && optgroup) {\n                        curChild = optgroup.nextSibling;\n                        optgroup = null;\n                    }\n                }\n            }\n\n            fromEl.selectedIndex = selectedIndex;\n        }\n    }\n};\n\nvar ELEMENT_NODE = 1;\nvar DOCUMENT_FRAGMENT_NODE$1 = 11;\nvar TEXT_NODE = 3;\nvar COMMENT_NODE = 8;\n\nfunction noop() {}\n\nfunction defaultGetNodeKey(node) {\n  if (node) {\n      return (node.getAttribute && node.getAttribute('id')) || node.id;\n  }\n}\n\nfunction morphdomFactory(morphAttrs) {\n\n    return function morphdom(fromNode, toNode, options) {\n        if (!options) {\n            options = {};\n        }\n\n        if (typeof toNode === 'string') {\n            if (fromNode.nodeName === '#document' || fromNode.nodeName === 'HTML' || fromNode.nodeName === 'BODY') {\n                var toNodeHtml = toNode;\n                toNode = doc.createElement('html');\n                toNode.innerHTML = toNodeHtml;\n            } else {\n                toNode = toElement(toNode);\n            }\n        }\n\n        var getNodeKey = options.getNodeKey || defaultGetNodeKey;\n        var onBeforeNodeAdded = options.onBeforeNodeAdded || noop;\n        var onNodeAdded = options.onNodeAdded || noop;\n        var onBeforeElUpdated = options.onBeforeElUpdated || noop;\n        var onElUpdated = options.onElUpdated || noop;\n        var onBeforeNodeDiscarded = options.onBeforeNodeDiscarded || noop;\n        var onNodeDiscarded = options.onNodeDiscarded || noop;\n        var onBeforeElChildrenUpdated = options.onBeforeElChildrenUpdated || noop;\n        var childrenOnly = options.childrenOnly === true;\n\n        // This object is used as a lookup to quickly find all keyed elements in the original DOM tree.\n        var fromNodesLookup = Object.create(null);\n        var keyedRemovalList = [];\n\n        function addKeyedRemoval(key) {\n            keyedRemovalList.push(key);\n        }\n\n        function walkDiscardedChildNodes(node, skipKeyedNodes) {\n            if (node.nodeType === ELEMENT_NODE) {\n                var curChild = node.firstChild;\n                while (curChild) {\n\n                    var key = undefined;\n\n                    if (skipKeyedNodes && (key = getNodeKey(curChild))) {\n                        // If we are skipping keyed nodes then we add the key\n                        // to a list so that it can be handled at the very end.\n                        addKeyedRemoval(key);\n                    } else {\n                        // Only report the node as discarded if it is not keyed. We do this because\n                        // at the end we loop through all keyed elements that were unmatched\n                        // and then discard them in one final pass.\n                        onNodeDiscarded(curChild);\n                        if (curChild.firstChild) {\n                            walkDiscardedChildNodes(curChild, skipKeyedNodes);\n                        }\n                    }\n\n                    curChild = curChild.nextSibling;\n                }\n            }\n        }\n\n        /**\n         * Removes a DOM node out of the original DOM\n         *\n         * @param  {Node} node The node to remove\n         * @param  {Node} parentNode The nodes parent\n         * @param  {Boolean} skipKeyedNodes If true then elements with keys will be skipped and not discarded.\n         * @return {undefined}\n         */\n        function removeNode(node, parentNode, skipKeyedNodes) {\n            if (onBeforeNodeDiscarded(node) === false) {\n                return;\n            }\n\n            if (parentNode) {\n                parentNode.removeChild(node);\n            }\n\n            onNodeDiscarded(node);\n            walkDiscardedChildNodes(node, skipKeyedNodes);\n        }\n\n        // // TreeWalker implementation is no faster, but keeping this around in case this changes in the future\n        // function indexTree(root) {\n        //     var treeWalker = document.createTreeWalker(\n        //         root,\n        //         NodeFilter.SHOW_ELEMENT);\n        //\n        //     var el;\n        //     while((el = treeWalker.nextNode())) {\n        //         var key = getNodeKey(el);\n        //         if (key) {\n        //             fromNodesLookup[key] = el;\n        //         }\n        //     }\n        // }\n\n        // // NodeIterator implementation is no faster, but keeping this around in case this changes in the future\n        //\n        // function indexTree(node) {\n        //     var nodeIterator = document.createNodeIterator(node, NodeFilter.SHOW_ELEMENT);\n        //     var el;\n        //     while((el = nodeIterator.nextNode())) {\n        //         var key = getNodeKey(el);\n        //         if (key) {\n        //             fromNodesLookup[key] = el;\n        //         }\n        //     }\n        // }\n\n        function indexTree(node) {\n            if (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE$1) {\n                var curChild = node.firstChild;\n                while (curChild) {\n                    var key = getNodeKey(curChild);\n                    if (key) {\n                        fromNodesLookup[key] = curChild;\n                    }\n\n                    // Walk recursively\n                    indexTree(curChild);\n\n                    curChild = curChild.nextSibling;\n                }\n            }\n        }\n\n        indexTree(fromNode);\n\n        function handleNodeAdded(el) {\n            onNodeAdded(el);\n\n            var curChild = el.firstChild;\n            while (curChild) {\n                var nextSibling = curChild.nextSibling;\n\n                var key = getNodeKey(curChild);\n                if (key) {\n                    var unmatchedFromEl = fromNodesLookup[key];\n                    // if we find a duplicate #id node in cache, replace `el` with cache value\n                    // and morph it to the child node.\n                    if (unmatchedFromEl && compareNodeNames(curChild, unmatchedFromEl)) {\n                        curChild.parentNode.replaceChild(unmatchedFromEl, curChild);\n                        morphEl(unmatchedFromEl, curChild);\n                    } else {\n                      handleNodeAdded(curChild);\n                    }\n                } else {\n                  // recursively call for curChild and it's children to see if we find something in\n                  // fromNodesLookup\n                  handleNodeAdded(curChild);\n                }\n\n                curChild = nextSibling;\n            }\n        }\n\n        function cleanupFromEl(fromEl, curFromNodeChild, curFromNodeKey) {\n            // We have processed all of the \"to nodes\". If curFromNodeChild is\n            // non-null then we still have some from nodes left over that need\n            // to be removed\n            while (curFromNodeChild) {\n                var fromNextSibling = curFromNodeChild.nextSibling;\n                if ((curFromNodeKey = getNodeKey(curFromNodeChild))) {\n                    // Since the node is keyed it might be matched up later so we defer\n                    // the actual removal to later\n                    addKeyedRemoval(curFromNodeKey);\n                } else {\n                    // NOTE: we skip nested keyed nodes from being removed since there is\n                    //       still a chance they will be matched up later\n                    removeNode(curFromNodeChild, fromEl, true /* skip keyed nodes */);\n                }\n                curFromNodeChild = fromNextSibling;\n            }\n        }\n\n        function morphEl(fromEl, toEl, childrenOnly) {\n            var toElKey = getNodeKey(toEl);\n\n            if (toElKey) {\n                // If an element with an ID is being morphed then it will be in the final\n                // DOM so clear it out of the saved elements collection\n                delete fromNodesLookup[toElKey];\n            }\n\n            if (!childrenOnly) {\n                // optional\n                if (onBeforeElUpdated(fromEl, toEl) === false) {\n                    return;\n                }\n\n                // update attributes on original DOM element first\n                morphAttrs(fromEl, toEl);\n                // optional\n                onElUpdated(fromEl);\n\n                if (onBeforeElChildrenUpdated(fromEl, toEl) === false) {\n                    return;\n                }\n            }\n\n            if (fromEl.nodeName !== 'TEXTAREA') {\n              morphChildren(fromEl, toEl);\n            } else {\n              specialElHandlers.TEXTAREA(fromEl, toEl);\n            }\n        }\n\n        function morphChildren(fromEl, toEl) {\n            var curToNodeChild = toEl.firstChild;\n            var curFromNodeChild = fromEl.firstChild;\n            var curToNodeKey;\n            var curFromNodeKey;\n\n            var fromNextSibling;\n            var toNextSibling;\n            var matchingFromEl;\n\n            // walk the children\n            outer: while (curToNodeChild) {\n                toNextSibling = curToNodeChild.nextSibling;\n                curToNodeKey = getNodeKey(curToNodeChild);\n\n                // walk the fromNode children all the way through\n                while (curFromNodeChild) {\n                    fromNextSibling = curFromNodeChild.nextSibling;\n\n                    if (curToNodeChild.isSameNode && curToNodeChild.isSameNode(curFromNodeChild)) {\n                        curToNodeChild = toNextSibling;\n                        curFromNodeChild = fromNextSibling;\n                        continue outer;\n                    }\n\n                    curFromNodeKey = getNodeKey(curFromNodeChild);\n\n                    var curFromNodeType = curFromNodeChild.nodeType;\n\n                    // this means if the curFromNodeChild doesnt have a match with the curToNodeChild\n                    var isCompatible = undefined;\n\n                    if (curFromNodeType === curToNodeChild.nodeType) {\n                        if (curFromNodeType === ELEMENT_NODE) {\n                            // Both nodes being compared are Element nodes\n\n                            if (curToNodeKey) {\n                                // The target node has a key so we want to match it up with the correct element\n                                // in the original DOM tree\n                                if (curToNodeKey !== curFromNodeKey) {\n                                    // The current element in the original DOM tree does not have a matching key so\n                                    // let's check our lookup to see if there is a matching element in the original\n                                    // DOM tree\n                                    if ((matchingFromEl = fromNodesLookup[curToNodeKey])) {\n                                        if (fromNextSibling === matchingFromEl) {\n                                            // Special case for single element removals. To avoid removing the original\n                                            // DOM node out of the tree (since that can break CSS transitions, etc.),\n                                            // we will instead discard the current node and wait until the next\n                                            // iteration to properly match up the keyed target element with its matching\n                                            // element in the original tree\n                                            isCompatible = false;\n                                        } else {\n                                            // We found a matching keyed element somewhere in the original DOM tree.\n                                            // Let's move the original DOM node into the current position and morph\n                                            // it.\n\n                                            // NOTE: We use insertBefore instead of replaceChild because we want to go through\n                                            // the `removeNode()` function for the node that is being discarded so that\n                                            // all lifecycle hooks are correctly invoked\n                                            fromEl.insertBefore(matchingFromEl, curFromNodeChild);\n\n                                            // fromNextSibling = curFromNodeChild.nextSibling;\n\n                                            if (curFromNodeKey) {\n                                                // Since the node is keyed it might be matched up later so we defer\n                                                // the actual removal to later\n                                                addKeyedRemoval(curFromNodeKey);\n                                            } else {\n                                                // NOTE: we skip nested keyed nodes from being removed since there is\n                                                //       still a chance they will be matched up later\n                                                removeNode(curFromNodeChild, fromEl, true /* skip keyed nodes */);\n                                            }\n\n                                            curFromNodeChild = matchingFromEl;\n                                        }\n                                    } else {\n                                        // The nodes are not compatible since the \"to\" node has a key and there\n                                        // is no matching keyed node in the source tree\n                                        isCompatible = false;\n                                    }\n                                }\n                            } else if (curFromNodeKey) {\n                                // The original has a key\n                                isCompatible = false;\n                            }\n\n                            isCompatible = isCompatible !== false && compareNodeNames(curFromNodeChild, curToNodeChild);\n                            if (isCompatible) {\n                                // We found compatible DOM elements so transform\n                                // the current \"from\" node to match the current\n                                // target DOM node.\n                                // MORPH\n                                morphEl(curFromNodeChild, curToNodeChild);\n                            }\n\n                        } else if (curFromNodeType === TEXT_NODE || curFromNodeType == COMMENT_NODE) {\n                            // Both nodes being compared are Text or Comment nodes\n                            isCompatible = true;\n                            // Simply update nodeValue on the original node to\n                            // change the text value\n                            if (curFromNodeChild.nodeValue !== curToNodeChild.nodeValue) {\n                                curFromNodeChild.nodeValue = curToNodeChild.nodeValue;\n                            }\n\n                        }\n                    }\n\n                    if (isCompatible) {\n                        // Advance both the \"to\" child and the \"from\" child since we found a match\n                        // Nothing else to do as we already recursively called morphChildren above\n                        curToNodeChild = toNextSibling;\n                        curFromNodeChild = fromNextSibling;\n                        continue outer;\n                    }\n\n                    // No compatible match so remove the old node from the DOM and continue trying to find a\n                    // match in the original DOM. However, we only do this if the from node is not keyed\n                    // since it is possible that a keyed node might match up with a node somewhere else in the\n                    // target tree and we don't want to discard it just yet since it still might find a\n                    // home in the final DOM tree. After everything is done we will remove any keyed nodes\n                    // that didn't find a home\n                    if (curFromNodeKey) {\n                        // Since the node is keyed it might be matched up later so we defer\n                        // the actual removal to later\n                        addKeyedRemoval(curFromNodeKey);\n                    } else {\n                        // NOTE: we skip nested keyed nodes from being removed since there is\n                        //       still a chance they will be matched up later\n                        removeNode(curFromNodeChild, fromEl, true /* skip keyed nodes */);\n                    }\n\n                    curFromNodeChild = fromNextSibling;\n                } // END: while(curFromNodeChild) {}\n\n                // If we got this far then we did not find a candidate match for\n                // our \"to node\" and we exhausted all of the children \"from\"\n                // nodes. Therefore, we will just append the current \"to\" node\n                // to the end\n                if (curToNodeKey && (matchingFromEl = fromNodesLookup[curToNodeKey]) && compareNodeNames(matchingFromEl, curToNodeChild)) {\n                    fromEl.appendChild(matchingFromEl);\n                    // MORPH\n                    morphEl(matchingFromEl, curToNodeChild);\n                } else {\n                    var onBeforeNodeAddedResult = onBeforeNodeAdded(curToNodeChild);\n                    if (onBeforeNodeAddedResult !== false) {\n                        if (onBeforeNodeAddedResult) {\n                            curToNodeChild = onBeforeNodeAddedResult;\n                        }\n\n                        if (curToNodeChild.actualize) {\n                            curToNodeChild = curToNodeChild.actualize(fromEl.ownerDocument || doc);\n                        }\n                        fromEl.appendChild(curToNodeChild);\n                        handleNodeAdded(curToNodeChild);\n                    }\n                }\n\n                curToNodeChild = toNextSibling;\n                curFromNodeChild = fromNextSibling;\n            }\n\n            cleanupFromEl(fromEl, curFromNodeChild, curFromNodeKey);\n\n            var specialElHandler = specialElHandlers[fromEl.nodeName];\n            if (specialElHandler) {\n                specialElHandler(fromEl, toEl);\n            }\n        } // END: morphChildren(...)\n\n        var morphedNode = fromNode;\n        var morphedNodeType = morphedNode.nodeType;\n        var toNodeType = toNode.nodeType;\n\n        if (!childrenOnly) {\n            // Handle the case where we are given two DOM nodes that are not\n            // compatible (e.g. <div> --> <span> or <div> --> TEXT)\n            if (morphedNodeType === ELEMENT_NODE) {\n                if (toNodeType === ELEMENT_NODE) {\n                    if (!compareNodeNames(fromNode, toNode)) {\n                        onNodeDiscarded(fromNode);\n                        morphedNode = moveChildren(fromNode, createElementNS(toNode.nodeName, toNode.namespaceURI));\n                    }\n                } else {\n                    // Going from an element node to a text node\n                    morphedNode = toNode;\n                }\n            } else if (morphedNodeType === TEXT_NODE || morphedNodeType === COMMENT_NODE) { // Text or comment node\n                if (toNodeType === morphedNodeType) {\n                    if (morphedNode.nodeValue !== toNode.nodeValue) {\n                        morphedNode.nodeValue = toNode.nodeValue;\n                    }\n\n                    return morphedNode;\n                } else {\n                    // Text node to something else\n                    morphedNode = toNode;\n                }\n            }\n        }\n\n        if (morphedNode === toNode) {\n            // The \"to node\" was not compatible with the \"from node\" so we had to\n            // toss out the \"from node\" and use the \"to node\"\n            onNodeDiscarded(fromNode);\n        } else {\n            if (toNode.isSameNode && toNode.isSameNode(morphedNode)) {\n                return;\n            }\n\n            morphEl(morphedNode, toNode, childrenOnly);\n\n            // We now need to loop over any keyed nodes that might need to be\n            // removed. We only do the removal if we know that the keyed node\n            // never found a match. When a keyed node is matched up we remove\n            // it out of fromNodesLookup and we use fromNodesLookup to determine\n            // if a keyed node has been matched up or not\n            if (keyedRemovalList) {\n                for (var i=0, len=keyedRemovalList.length; i<len; i++) {\n                    var elToRemove = fromNodesLookup[keyedRemovalList[i]];\n                    if (elToRemove) {\n                        removeNode(elToRemove, elToRemove.parentNode, false);\n                    }\n                }\n            }\n        }\n\n        if (!childrenOnly && morphedNode !== fromNode && fromNode.parentNode) {\n            if (morphedNode.actualize) {\n                morphedNode = morphedNode.actualize(fromNode.ownerDocument || doc);\n            }\n            // If we had to swap out the from node with a new node because the old\n            // node was not compatible with the target node then we need to\n            // replace the old DOM node in the original DOM tree. This is only\n            // possible if the original DOM node was part of a DOM tree which\n            // we know is the case if it has a parent node.\n            fromNode.parentNode.replaceChild(morphedNode, fromNode);\n        }\n\n        return morphedNode;\n    };\n}\n\nvar morphdom = morphdomFactory(morphAttrs);\n\nexport default morphdom;\n","/*global define:false */\n/**\n * Copyright 2012-2017 Craig Campbell\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * Mousetrap is a simple keyboard shortcut library for Javascript with\n * no external dependencies\n *\n * @version 1.6.5\n * @url craig.is/killing/mice\n */\n(function(window, document, undefined) {\n\n    // Check if mousetrap is used inside browser, if not, return\n    if (!window) {\n        return;\n    }\n\n    /**\n     * mapping of special keycodes to their corresponding keys\n     *\n     * everything in this dictionary cannot use keypress events\n     * so it has to be here to map to the correct keycodes for\n     * keyup/keydown events\n     *\n     * @type {Object}\n     */\n    var _MAP = {\n        8: 'backspace',\n        9: 'tab',\n        13: 'enter',\n        16: 'shift',\n        17: 'ctrl',\n        18: 'alt',\n        20: 'capslock',\n        27: 'esc',\n        32: 'space',\n        33: 'pageup',\n        34: 'pagedown',\n        35: 'end',\n        36: 'home',\n        37: 'left',\n        38: 'up',\n        39: 'right',\n        40: 'down',\n        45: 'ins',\n        46: 'del',\n        91: 'meta',\n        93: 'meta',\n        224: 'meta'\n    };\n\n    /**\n     * mapping for special characters so they can support\n     *\n     * this dictionary is only used incase you want to bind a\n     * keyup or keydown event to one of these keys\n     *\n     * @type {Object}\n     */\n    var _KEYCODE_MAP = {\n        106: '*',\n        107: '+',\n        109: '-',\n        110: '.',\n        111 : '/',\n        186: ';',\n        187: '=',\n        188: ',',\n        189: '-',\n        190: '.',\n        191: '/',\n        192: '`',\n        219: '[',\n        220: '\\\\',\n        221: ']',\n        222: '\\''\n    };\n\n    /**\n     * this is a mapping of keys that require shift on a US keypad\n     * back to the non shift equivelents\n     *\n     * this is so you can use keyup events with these keys\n     *\n     * note that this will only work reliably on US keyboards\n     *\n     * @type {Object}\n     */\n    var _SHIFT_MAP = {\n        '~': '`',\n        '!': '1',\n        '@': '2',\n        '#': '3',\n        '$': '4',\n        '%': '5',\n        '^': '6',\n        '&': '7',\n        '*': '8',\n        '(': '9',\n        ')': '0',\n        '_': '-',\n        '+': '=',\n        ':': ';',\n        '\\\"': '\\'',\n        '<': ',',\n        '>': '.',\n        '?': '/',\n        '|': '\\\\'\n    };\n\n    /**\n     * this is a list of special strings you can use to map\n     * to modifier keys when you specify your keyboard shortcuts\n     *\n     * @type {Object}\n     */\n    var _SPECIAL_ALIASES = {\n        'option': 'alt',\n        'command': 'meta',\n        'return': 'enter',\n        'escape': 'esc',\n        'plus': '+',\n        'mod': /Mac|iPod|iPhone|iPad/.test(navigator.platform) ? 'meta' : 'ctrl'\n    };\n\n    /**\n     * variable to store the flipped version of _MAP from above\n     * needed to check if we should use keypress or not when no action\n     * is specified\n     *\n     * @type {Object|undefined}\n     */\n    var _REVERSE_MAP;\n\n    /**\n     * loop through the f keys, f1 to f19 and add them to the map\n     * programatically\n     */\n    for (var i = 1; i < 20; ++i) {\n        _MAP[111 + i] = 'f' + i;\n    }\n\n    /**\n     * loop through to map numbers on the numeric keypad\n     */\n    for (i = 0; i <= 9; ++i) {\n\n        // This needs to use a string cause otherwise since 0 is falsey\n        // mousetrap will never fire for numpad 0 pressed as part of a keydown\n        // event.\n        //\n        // @see https://github.com/ccampbell/mousetrap/pull/258\n        _MAP[i + 96] = i.toString();\n    }\n\n    /**\n     * cross browser add event method\n     *\n     * @param {Element|HTMLDocument} object\n     * @param {string} type\n     * @param {Function} callback\n     * @returns void\n     */\n    function _addEvent(object, type, callback) {\n        if (object.addEventListener) {\n            object.addEventListener(type, callback, false);\n            return;\n        }\n\n        object.attachEvent('on' + type, callback);\n    }\n\n    /**\n     * takes the event and returns the key character\n     *\n     * @param {Event} e\n     * @return {string}\n     */\n    function _characterFromEvent(e) {\n\n        // for keypress events we should return the character as is\n        if (e.type == 'keypress') {\n            var character = String.fromCharCode(e.which);\n\n            // if the shift key is not pressed then it is safe to assume\n            // that we want the character to be lowercase.  this means if\n            // you accidentally have caps lock on then your key bindings\n            // will continue to work\n            //\n            // the only side effect that might not be desired is if you\n            // bind something like 'A' cause you want to trigger an\n            // event when capital A is pressed caps lock will no longer\n            // trigger the event.  shift+a will though.\n            if (!e.shiftKey) {\n                character = character.toLowerCase();\n            }\n\n            return character;\n        }\n\n        // for non keypress events the special maps are needed\n        if (_MAP[e.which]) {\n            return _MAP[e.which];\n        }\n\n        if (_KEYCODE_MAP[e.which]) {\n            return _KEYCODE_MAP[e.which];\n        }\n\n        // if it is not in the special map\n\n        // with keydown and keyup events the character seems to always\n        // come in as an uppercase character whether you are pressing shift\n        // or not.  we should make sure it is always lowercase for comparisons\n        return String.fromCharCode(e.which).toLowerCase();\n    }\n\n    /**\n     * checks if two arrays are equal\n     *\n     * @param {Array} modifiers1\n     * @param {Array} modifiers2\n     * @returns {boolean}\n     */\n    function _modifiersMatch(modifiers1, modifiers2) {\n        return modifiers1.sort().join(',') === modifiers2.sort().join(',');\n    }\n\n    /**\n     * takes a key event and figures out what the modifiers are\n     *\n     * @param {Event} e\n     * @returns {Array}\n     */\n    function _eventModifiers(e) {\n        var modifiers = [];\n\n        if (e.shiftKey) {\n            modifiers.push('shift');\n        }\n\n        if (e.altKey) {\n            modifiers.push('alt');\n        }\n\n        if (e.ctrlKey) {\n            modifiers.push('ctrl');\n        }\n\n        if (e.metaKey) {\n            modifiers.push('meta');\n        }\n\n        return modifiers;\n    }\n\n    /**\n     * prevents default for this event\n     *\n     * @param {Event} e\n     * @returns void\n     */\n    function _preventDefault(e) {\n        if (e.preventDefault) {\n            e.preventDefault();\n            return;\n        }\n\n        e.returnValue = false;\n    }\n\n    /**\n     * stops propogation for this event\n     *\n     * @param {Event} e\n     * @returns void\n     */\n    function _stopPropagation(e) {\n        if (e.stopPropagation) {\n            e.stopPropagation();\n            return;\n        }\n\n        e.cancelBubble = true;\n    }\n\n    /**\n     * determines if the keycode specified is a modifier key or not\n     *\n     * @param {string} key\n     * @returns {boolean}\n     */\n    function _isModifier(key) {\n        return key == 'shift' || key == 'ctrl' || key == 'alt' || key == 'meta';\n    }\n\n    /**\n     * reverses the map lookup so that we can look for specific keys\n     * to see what can and can't use keypress\n     *\n     * @return {Object}\n     */\n    function _getReverseMap() {\n        if (!_REVERSE_MAP) {\n            _REVERSE_MAP = {};\n            for (var key in _MAP) {\n\n                // pull out the numeric keypad from here cause keypress should\n                // be able to detect the keys from the character\n                if (key > 95 && key < 112) {\n                    continue;\n                }\n\n                if (_MAP.hasOwnProperty(key)) {\n                    _REVERSE_MAP[_MAP[key]] = key;\n                }\n            }\n        }\n        return _REVERSE_MAP;\n    }\n\n    /**\n     * picks the best action based on the key combination\n     *\n     * @param {string} key - character for key\n     * @param {Array} modifiers\n     * @param {string=} action passed in\n     */\n    function _pickBestAction(key, modifiers, action) {\n\n        // if no action was picked in we should try to pick the one\n        // that we think would work best for this key\n        if (!action) {\n            action = _getReverseMap()[key] ? 'keydown' : 'keypress';\n        }\n\n        // modifier keys don't work as expected with keypress,\n        // switch to keydown\n        if (action == 'keypress' && modifiers.length) {\n            action = 'keydown';\n        }\n\n        return action;\n    }\n\n    /**\n     * Converts from a string key combination to an array\n     *\n     * @param  {string} combination like \"command+shift+l\"\n     * @return {Array}\n     */\n    function _keysFromString(combination) {\n        if (combination === '+') {\n            return ['+'];\n        }\n\n        combination = combination.replace(/\\+{2}/g, '+plus');\n        return combination.split('+');\n    }\n\n    /**\n     * Gets info for a specific key combination\n     *\n     * @param  {string} combination key combination (\"command+s\" or \"a\" or \"*\")\n     * @param  {string=} action\n     * @returns {Object}\n     */\n    function _getKeyInfo(combination, action) {\n        var keys;\n        var key;\n        var i;\n        var modifiers = [];\n\n        // take the keys from this pattern and figure out what the actual\n        // pattern is all about\n        keys = _keysFromString(combination);\n\n        for (i = 0; i < keys.length; ++i) {\n            key = keys[i];\n\n            // normalize key names\n            if (_SPECIAL_ALIASES[key]) {\n                key = _SPECIAL_ALIASES[key];\n            }\n\n            // if this is not a keypress event then we should\n            // be smart about using shift keys\n            // this will only work for US keyboards however\n            if (action && action != 'keypress' && _SHIFT_MAP[key]) {\n                key = _SHIFT_MAP[key];\n                modifiers.push('shift');\n            }\n\n            // if this key is a modifier then add it to the list of modifiers\n            if (_isModifier(key)) {\n                modifiers.push(key);\n            }\n        }\n\n        // depending on what the key combination is\n        // we will try to pick the best event for it\n        action = _pickBestAction(key, modifiers, action);\n\n        return {\n            key: key,\n            modifiers: modifiers,\n            action: action\n        };\n    }\n\n    function _belongsTo(element, ancestor) {\n        if (element === null || element === document) {\n            return false;\n        }\n\n        if (element === ancestor) {\n            return true;\n        }\n\n        return _belongsTo(element.parentNode, ancestor);\n    }\n\n    function Mousetrap(targetElement) {\n        var self = this;\n\n        targetElement = targetElement || document;\n\n        if (!(self instanceof Mousetrap)) {\n            return new Mousetrap(targetElement);\n        }\n\n        /**\n         * element to attach key events to\n         *\n         * @type {Element}\n         */\n        self.target = targetElement;\n\n        /**\n         * a list of all the callbacks setup via Mousetrap.bind()\n         *\n         * @type {Object}\n         */\n        self._callbacks = {};\n\n        /**\n         * direct map of string combinations to callbacks used for trigger()\n         *\n         * @type {Object}\n         */\n        self._directMap = {};\n\n        /**\n         * keeps track of what level each sequence is at since multiple\n         * sequences can start out with the same sequence\n         *\n         * @type {Object}\n         */\n        var _sequenceLevels = {};\n\n        /**\n         * variable to store the setTimeout call\n         *\n         * @type {null|number}\n         */\n        var _resetTimer;\n\n        /**\n         * temporary state where we will ignore the next keyup\n         *\n         * @type {boolean|string}\n         */\n        var _ignoreNextKeyup = false;\n\n        /**\n         * temporary state where we will ignore the next keypress\n         *\n         * @type {boolean}\n         */\n        var _ignoreNextKeypress = false;\n\n        /**\n         * are we currently inside of a sequence?\n         * type of action (\"keyup\" or \"keydown\" or \"keypress\") or false\n         *\n         * @type {boolean|string}\n         */\n        var _nextExpectedAction = false;\n\n        /**\n         * resets all sequence counters except for the ones passed in\n         *\n         * @param {Object} doNotReset\n         * @returns void\n         */\n        function _resetSequences(doNotReset) {\n            doNotReset = doNotReset || {};\n\n            var activeSequences = false,\n                key;\n\n            for (key in _sequenceLevels) {\n                if (doNotReset[key]) {\n                    activeSequences = true;\n                    continue;\n                }\n                _sequenceLevels[key] = 0;\n            }\n\n            if (!activeSequences) {\n                _nextExpectedAction = false;\n            }\n        }\n\n        /**\n         * finds all callbacks that match based on the keycode, modifiers,\n         * and action\n         *\n         * @param {string} character\n         * @param {Array} modifiers\n         * @param {Event|Object} e\n         * @param {string=} sequenceName - name of the sequence we are looking for\n         * @param {string=} combination\n         * @param {number=} level\n         * @returns {Array}\n         */\n        function _getMatches(character, modifiers, e, sequenceName, combination, level) {\n            var i;\n            var callback;\n            var matches = [];\n            var action = e.type;\n\n            // if there are no events related to this keycode\n            if (!self._callbacks[character]) {\n                return [];\n            }\n\n            // if a modifier key is coming up on its own we should allow it\n            if (action == 'keyup' && _isModifier(character)) {\n                modifiers = [character];\n            }\n\n            // loop through all callbacks for the key that was pressed\n            // and see if any of them match\n            for (i = 0; i < self._callbacks[character].length; ++i) {\n                callback = self._callbacks[character][i];\n\n                // if a sequence name is not specified, but this is a sequence at\n                // the wrong level then move onto the next match\n                if (!sequenceName && callback.seq && _sequenceLevels[callback.seq] != callback.level) {\n                    continue;\n                }\n\n                // if the action we are looking for doesn't match the action we got\n                // then we should keep going\n                if (action != callback.action) {\n                    continue;\n                }\n\n                // if this is a keypress event and the meta key and control key\n                // are not pressed that means that we need to only look at the\n                // character, otherwise check the modifiers as well\n                //\n                // chrome will not fire a keypress if meta or control is down\n                // safari will fire a keypress if meta or meta+shift is down\n                // firefox will fire a keypress if meta or control is down\n                if ((action == 'keypress' && !e.metaKey && !e.ctrlKey) || _modifiersMatch(modifiers, callback.modifiers)) {\n\n                    // when you bind a combination or sequence a second time it\n                    // should overwrite the first one.  if a sequenceName or\n                    // combination is specified in this call it does just that\n                    //\n                    // @todo make deleting its own method?\n                    var deleteCombo = !sequenceName && callback.combo == combination;\n                    var deleteSequence = sequenceName && callback.seq == sequenceName && callback.level == level;\n                    if (deleteCombo || deleteSequence) {\n                        self._callbacks[character].splice(i, 1);\n                    }\n\n                    matches.push(callback);\n                }\n            }\n\n            return matches;\n        }\n\n        /**\n         * actually calls the callback function\n         *\n         * if your callback function returns false this will use the jquery\n         * convention - prevent default and stop propogation on the event\n         *\n         * @param {Function} callback\n         * @param {Event} e\n         * @returns void\n         */\n        function _fireCallback(callback, e, combo, sequence) {\n\n            // if this event should not happen stop here\n            if (self.stopCallback(e, e.target || e.srcElement, combo, sequence)) {\n                return;\n            }\n\n            if (callback(e, combo) === false) {\n                _preventDefault(e);\n                _stopPropagation(e);\n            }\n        }\n\n        /**\n         * handles a character key event\n         *\n         * @param {string} character\n         * @param {Array} modifiers\n         * @param {Event} e\n         * @returns void\n         */\n        self._handleKey = function(character, modifiers, e) {\n            var callbacks = _getMatches(character, modifiers, e);\n            var i;\n            var doNotReset = {};\n            var maxLevel = 0;\n            var processedSequenceCallback = false;\n\n            // Calculate the maxLevel for sequences so we can only execute the longest callback sequence\n            for (i = 0; i < callbacks.length; ++i) {\n                if (callbacks[i].seq) {\n                    maxLevel = Math.max(maxLevel, callbacks[i].level);\n                }\n            }\n\n            // loop through matching callbacks for this key event\n            for (i = 0; i < callbacks.length; ++i) {\n\n                // fire for all sequence callbacks\n                // this is because if for example you have multiple sequences\n                // bound such as \"g i\" and \"g t\" they both need to fire the\n                // callback for matching g cause otherwise you can only ever\n                // match the first one\n                if (callbacks[i].seq) {\n\n                    // only fire callbacks for the maxLevel to prevent\n                    // subsequences from also firing\n                    //\n                    // for example 'a option b' should not cause 'option b' to fire\n                    // even though 'option b' is part of the other sequence\n                    //\n                    // any sequences that do not match here will be discarded\n                    // below by the _resetSequences call\n                    if (callbacks[i].level != maxLevel) {\n                        continue;\n                    }\n\n                    processedSequenceCallback = true;\n\n                    // keep a list of which sequences were matches for later\n                    doNotReset[callbacks[i].seq] = 1;\n                    _fireCallback(callbacks[i].callback, e, callbacks[i].combo, callbacks[i].seq);\n                    continue;\n                }\n\n                // if there were no sequence matches but we are still here\n                // that means this is a regular match so we should fire that\n                if (!processedSequenceCallback) {\n                    _fireCallback(callbacks[i].callback, e, callbacks[i].combo);\n                }\n            }\n\n            // if the key you pressed matches the type of sequence without\n            // being a modifier (ie \"keyup\" or \"keypress\") then we should\n            // reset all sequences that were not matched by this event\n            //\n            // this is so, for example, if you have the sequence \"h a t\" and you\n            // type \"h e a r t\" it does not match.  in this case the \"e\" will\n            // cause the sequence to reset\n            //\n            // modifier keys are ignored because you can have a sequence\n            // that contains modifiers such as \"enter ctrl+space\" and in most\n            // cases the modifier key will be pressed before the next key\n            //\n            // also if you have a sequence such as \"ctrl+b a\" then pressing the\n            // \"b\" key will trigger a \"keypress\" and a \"keydown\"\n            //\n            // the \"keydown\" is expected when there is a modifier, but the\n            // \"keypress\" ends up matching the _nextExpectedAction since it occurs\n            // after and that causes the sequence to reset\n            //\n            // we ignore keypresses in a sequence that directly follow a keydown\n            // for the same character\n            var ignoreThisKeypress = e.type == 'keypress' && _ignoreNextKeypress;\n            if (e.type == _nextExpectedAction && !_isModifier(character) && !ignoreThisKeypress) {\n                _resetSequences(doNotReset);\n            }\n\n            _ignoreNextKeypress = processedSequenceCallback && e.type == 'keydown';\n        };\n\n        /**\n         * handles a keydown event\n         *\n         * @param {Event} e\n         * @returns void\n         */\n        function _handleKeyEvent(e) {\n\n            // normalize e.which for key events\n            // @see http://stackoverflow.com/questions/4285627/javascript-keycode-vs-charcode-utter-confusion\n            if (typeof e.which !== 'number') {\n                e.which = e.keyCode;\n            }\n\n            var character = _characterFromEvent(e);\n\n            // no character found then stop\n            if (!character) {\n                return;\n            }\n\n            // need to use === for the character check because the character can be 0\n            if (e.type == 'keyup' && _ignoreNextKeyup === character) {\n                _ignoreNextKeyup = false;\n                return;\n            }\n\n            self.handleKey(character, _eventModifiers(e), e);\n        }\n\n        /**\n         * called to set a 1 second timeout on the specified sequence\n         *\n         * this is so after each key press in the sequence you have 1 second\n         * to press the next key before you have to start over\n         *\n         * @returns void\n         */\n        function _resetSequenceTimer() {\n            clearTimeout(_resetTimer);\n            _resetTimer = setTimeout(_resetSequences, 1000);\n        }\n\n        /**\n         * binds a key sequence to an event\n         *\n         * @param {string} combo - combo specified in bind call\n         * @param {Array} keys\n         * @param {Function} callback\n         * @param {string=} action\n         * @returns void\n         */\n        function _bindSequence(combo, keys, callback, action) {\n\n            // start off by adding a sequence level record for this combination\n            // and setting the level to 0\n            _sequenceLevels[combo] = 0;\n\n            /**\n             * callback to increase the sequence level for this sequence and reset\n             * all other sequences that were active\n             *\n             * @param {string} nextAction\n             * @returns {Function}\n             */\n            function _increaseSequence(nextAction) {\n                return function() {\n                    _nextExpectedAction = nextAction;\n                    ++_sequenceLevels[combo];\n                    _resetSequenceTimer();\n                };\n            }\n\n            /**\n             * wraps the specified callback inside of another function in order\n             * to reset all sequence counters as soon as this sequence is done\n             *\n             * @param {Event} e\n             * @returns void\n             */\n            function _callbackAndReset(e) {\n                _fireCallback(callback, e, combo);\n\n                // we should ignore the next key up if the action is key down\n                // or keypress.  this is so if you finish a sequence and\n                // release the key the final key will not trigger a keyup\n                if (action !== 'keyup') {\n                    _ignoreNextKeyup = _characterFromEvent(e);\n                }\n\n                // weird race condition if a sequence ends with the key\n                // another sequence begins with\n                setTimeout(_resetSequences, 10);\n            }\n\n            // loop through keys one at a time and bind the appropriate callback\n            // function.  for any key leading up to the final one it should\n            // increase the sequence. after the final, it should reset all sequences\n            //\n            // if an action is specified in the original bind call then that will\n            // be used throughout.  otherwise we will pass the action that the\n            // next key in the sequence should match.  this allows a sequence\n            // to mix and match keypress and keydown events depending on which\n            // ones are better suited to the key provided\n            for (var i = 0; i < keys.length; ++i) {\n                var isFinal = i + 1 === keys.length;\n                var wrappedCallback = isFinal ? _callbackAndReset : _increaseSequence(action || _getKeyInfo(keys[i + 1]).action);\n                _bindSingle(keys[i], wrappedCallback, action, combo, i);\n            }\n        }\n\n        /**\n         * binds a single keyboard combination\n         *\n         * @param {string} combination\n         * @param {Function} callback\n         * @param {string=} action\n         * @param {string=} sequenceName - name of sequence if part of sequence\n         * @param {number=} level - what part of the sequence the command is\n         * @returns void\n         */\n        function _bindSingle(combination, callback, action, sequenceName, level) {\n\n            // store a direct mapped reference for use with Mousetrap.trigger\n            self._directMap[combination + ':' + action] = callback;\n\n            // make sure multiple spaces in a row become a single space\n            combination = combination.replace(/\\s+/g, ' ');\n\n            var sequence = combination.split(' ');\n            var info;\n\n            // if this pattern is a sequence of keys then run through this method\n            // to reprocess each pattern one key at a time\n            if (sequence.length > 1) {\n                _bindSequence(combination, sequence, callback, action);\n                return;\n            }\n\n            info = _getKeyInfo(combination, action);\n\n            // make sure to initialize array if this is the first time\n            // a callback is added for this key\n            self._callbacks[info.key] = self._callbacks[info.key] || [];\n\n            // remove an existing match if there is one\n            _getMatches(info.key, info.modifiers, {type: info.action}, sequenceName, combination, level);\n\n            // add this call back to the array\n            // if it is a sequence put it at the beginning\n            // if not put it at the end\n            //\n            // this is important because the way these are processed expects\n            // the sequence ones to come first\n            self._callbacks[info.key][sequenceName ? 'unshift' : 'push']({\n                callback: callback,\n                modifiers: info.modifiers,\n                action: info.action,\n                seq: sequenceName,\n                level: level,\n                combo: combination\n            });\n        }\n\n        /**\n         * binds multiple combinations to the same callback\n         *\n         * @param {Array} combinations\n         * @param {Function} callback\n         * @param {string|undefined} action\n         * @returns void\n         */\n        self._bindMultiple = function(combinations, callback, action) {\n            for (var i = 0; i < combinations.length; ++i) {\n                _bindSingle(combinations[i], callback, action);\n            }\n        };\n\n        // start!\n        _addEvent(targetElement, 'keypress', _handleKeyEvent);\n        _addEvent(targetElement, 'keydown', _handleKeyEvent);\n        _addEvent(targetElement, 'keyup', _handleKeyEvent);\n    }\n\n    /**\n     * binds an event to mousetrap\n     *\n     * can be a single key, a combination of keys separated with +,\n     * an array of keys, or a sequence of keys separated by spaces\n     *\n     * be sure to list the modifier keys first to make sure that the\n     * correct key ends up getting bound (the last key in the pattern)\n     *\n     * @param {string|Array} keys\n     * @param {Function} callback\n     * @param {string=} action - 'keypress', 'keydown', or 'keyup'\n     * @returns void\n     */\n    Mousetrap.prototype.bind = function(keys, callback, action) {\n        var self = this;\n        keys = keys instanceof Array ? keys : [keys];\n        self._bindMultiple.call(self, keys, callback, action);\n        return self;\n    };\n\n    /**\n     * unbinds an event to mousetrap\n     *\n     * the unbinding sets the callback function of the specified key combo\n     * to an empty function and deletes the corresponding key in the\n     * _directMap dict.\n     *\n     * TODO: actually remove this from the _callbacks dictionary instead\n     * of binding an empty function\n     *\n     * the keycombo+action has to be exactly the same as\n     * it was defined in the bind method\n     *\n     * @param {string|Array} keys\n     * @param {string} action\n     * @returns void\n     */\n    Mousetrap.prototype.unbind = function(keys, action) {\n        var self = this;\n        return self.bind.call(self, keys, function() {}, action);\n    };\n\n    /**\n     * triggers an event that has already been bound\n     *\n     * @param {string} keys\n     * @param {string=} action\n     * @returns void\n     */\n    Mousetrap.prototype.trigger = function(keys, action) {\n        var self = this;\n        if (self._directMap[keys + ':' + action]) {\n            self._directMap[keys + ':' + action]({}, keys);\n        }\n        return self;\n    };\n\n    /**\n     * resets the library back to its initial state.  this is useful\n     * if you want to clear out the current keyboard shortcuts and bind\n     * new ones - for example if you switch to another page\n     *\n     * @returns void\n     */\n    Mousetrap.prototype.reset = function() {\n        var self = this;\n        self._callbacks = {};\n        self._directMap = {};\n        return self;\n    };\n\n    /**\n     * should we stop this event before firing off callbacks\n     *\n     * @param {Event} e\n     * @param {Element} element\n     * @return {boolean}\n     */\n    Mousetrap.prototype.stopCallback = function(e, element) {\n        var self = this;\n\n        // if the element has the class \"mousetrap\" then no need to stop\n        if ((' ' + element.className + ' ').indexOf(' mousetrap ') > -1) {\n            return false;\n        }\n\n        if (_belongsTo(element, self.target)) {\n            return false;\n        }\n\n        // Events originating from a shadow DOM are re-targetted and `e.target` is the shadow host,\n        // not the initial event target in the shadow tree. Note that not all events cross the\n        // shadow boundary.\n        // For shadow trees with `mode: 'open'`, the initial event target is the first element in\n        // the event’s composed path. For shadow trees with `mode: 'closed'`, the initial event\n        // target cannot be obtained.\n        if ('composedPath' in e && typeof e.composedPath === 'function') {\n            // For open shadow trees, update `element` so that the following check works.\n            var initialEventTarget = e.composedPath()[0];\n            if (initialEventTarget !== e.target) {\n                element = initialEventTarget;\n            }\n        }\n\n        // stop for input, select, and textarea\n        return element.tagName == 'INPUT' || element.tagName == 'SELECT' || element.tagName == 'TEXTAREA' || element.isContentEditable;\n    };\n\n    /**\n     * exposes _handleKey publicly so it can be overwritten by extensions\n     */\n    Mousetrap.prototype.handleKey = function() {\n        var self = this;\n        return self._handleKey.apply(self, arguments);\n    };\n\n    /**\n     * allow custom key mappings\n     */\n    Mousetrap.addKeycodes = function(object) {\n        for (var key in object) {\n            if (object.hasOwnProperty(key)) {\n                _MAP[key] = object[key];\n            }\n        }\n        _REVERSE_MAP = null;\n    };\n\n    /**\n     * Init the global mousetrap functions\n     *\n     * This method is needed to allow the global mousetrap functions to work\n     * now that mousetrap is a constructor function.\n     */\n    Mousetrap.init = function() {\n        var documentMousetrap = Mousetrap(document);\n        for (var method in documentMousetrap) {\n            if (method.charAt(0) !== '_') {\n                Mousetrap[method] = (function(method) {\n                    return function() {\n                        return documentMousetrap[method].apply(documentMousetrap, arguments);\n                    };\n                } (method));\n            }\n        }\n    };\n\n    Mousetrap.init();\n\n    // expose mousetrap to the global object\n    window.Mousetrap = Mousetrap;\n\n    // expose as a common js module\n    if (typeof module !== 'undefined' && module.exports) {\n        module.exports = Mousetrap;\n    }\n\n    // expose mousetrap as an AMD module\n    if (typeof define === 'function' && define.amd) {\n        define(function() {\n            return Mousetrap;\n        });\n    }\n}) (typeof window !== 'undefined' ? window : null, typeof  window !== 'undefined' ? document : null);\n","import morphdom from 'morphdom'\n// https://github.com/ccampbell/mousetrap\nimport mousetrap from 'mousetrap'\nimport './hypergen'\nimport * as hypergen from './hypergen'\n\n// Make all exported vars availabe in window.hypergen.\nwindow.hypergen = hypergen\n\n// Shims\nif (typeof Array.isArray === 'undefined') {\n  Array.isArray = function(obj) {\n    return Object.prototype.toString.call(obj) === '[object Array]';\n  }\n}\n\n// Commands that can be called from the backend.\nexport const morph = function(id, html) {\n  morphdom(\n    document.getElementById(id),\n    \"<div>\" + html + \"</div>\",\n    {\n      childrenOnly: true,\n      onBeforeElUpdated: function(fromEl, toEl) {\n        let focused = document.activeElement\n        if((fromEl.nodeName == \"INPUT\" || fromEl.nodeName == \"TEXTAREA\") && fromEl === focused) {\n          let types = [\"checkbox\", \"radio\"]\n          if (fromEl.nodeName === \"INPUT\" && types.indexOf(fromEl.type) !== -1) {\n            return true\n          }\n          mergeAttrs(fromEl, toEl)\n          return false\n        } else if (fromEl.nodeName == \"INPUT\" && fromEl.type === \"file\" && fromEl.files.length > 0) {\n          mergeAttrs(fromEl, toEl)\n          return false\n        } else if (fromEl.nodeName === \"SCRIPT\" && toEl.nodeName === \"SCRIPT\") {\n            var script = document.createElement('script');\n            //copy over the attributes\n            [...toEl.attributes].forEach( attr => { script.setAttribute(attr.nodeName ,attr.nodeValue) })\n            script.innerHTML = toEl.innerHTML;\n            fromEl.replaceWith(script)\n            return false;\n        } else {\n          return true\n        }\n      },\n      onNodeAdded: function (node) {\n        if (node.nodeName === 'SCRIPT') {\n          var script = document.createElement('script');\n          //copy over the attributes\n          [...node.attributes].forEach( attr => { script.setAttribute(attr.nodeName ,attr.nodeValue) })\n          script.innerHTML = node.innerHTML;\n          node.replaceWith(script)\n        }\n      },\n    }\n  )\n\n  const autofocus = document.querySelectorAll('[autofocus]')[0]\n  if (autofocus !== undefined) autofocus.focus()\n}\n\nexport const remove = function(id) {\n  let el = document.getElementById(id);\n  el.parentNode.removeChild(el)\n}\n\nexport const hide = function(id) {\n  let el = document.getElementById(id)\n  el.style.display = \"none\"\n}\n\nexport const display = function(id, value) {\n  let el = document.getElementById(id)\n  el.style.display = value || \"block\"\n}\n\nexport const redirect = function(url) {\n  window.location = url\n}\n\n// TODO: Dont clutter window.\nwindow.clientState = {}\nexport const setClientState = function(at, value) {\n  let clientState = window.clientState\n  for (const path of at.split(\".\")) {\n    if (clientState[path] === undefined) clientState[path] = {}\n    clientState = clientState[path]\n  }\n  Object.assign(clientState, value)\n  console.log(\"Setting new state for window.clientState\", at, \"with value\", value, \"giving\",\n              window.clientState)\n}\n\n// Callback\nvar i = 0\nvar isBlocked = false\nexport const callback = function(url, args, {debounce=0, confirm_=false, blocks=false, uploadFiles=false,\n                                             params={}, meta={}, clear=false, elementId=null, debug=false,\n                                             event=null, headers={}}={})\n{\n  if (!!event) {\n    event.preventDefault()\n    event.stopPropagation()\n  }\n  let postIt = function() {\n    let json\n    console.log(\"REQUEST\", url, args, debounce)\n    i++\n\n    // The element function must have access to the FormData.\n    // TODO: Dont clutter window.\n    window.hypergenGlobalFormdata = new FormData()\n    window.hypergenUploadFiles = uploadFiles\n    try {\n      json = JSON.stringify({\n        args: args,\n        meta: meta,\n      })\n    } catch(error) {\n      if (error === MISSING_ELEMENT_EXCEPTION) {\n        console.warn(\"An element is missing. This can happen if a dom element has multiple event handlers.\", url)\n        return\n      } else {\n        throw(error)\n      }\n    }\n    \n    let formData = window.hypergenGlobalFormdata\n    window.hypergenGlobalFormdata = null\n    window.hypergenUploadFiles = null\n    formData.append(\"hypergen_data\", json)\n\n    if (blocks === true) {\n      if (isBlocked === true) {\n        console.error(\"Callback was blocked\")\n        return\n      } else {\n        isBlocked = true\n      }\n    }\n    post(url, formData, (data) => {\n      console.log(\"RESPONSE\", data)\n      if (data !== null) applyCommands(data)\n      isBlocked = false\n      if (clear === true) document.getElementById(elementId).value = \"\"\n    }, (data, jsonOk, xhr) => {\n      isBlocked = false\n      console.error(\"Hypergen post error occured\", data)\n      if (debug !== true) {\n        if (xhr.getResponseHeader(\"Content-Type\") === \"text/plain\") {\n          data = \"<pre><code>\" + data + \"</pre></code>\"\n        }\n        document.getElementsByTagName(\"html\")[0].innerHTML = data\n      }\n    }, params, headers)\n  }\n  if (debounce === 0) {\n    if (confirm_ === false) postIt()\n    else if (confirm(confirm_)) postIt()\n  }\n  else throttle(postIt, {delay: debounce, group: url, confirm_}) \n}\n\n// Timing\nvar _THROTTLE_GROUPS = {}\nexport let throttle = function (func, {delay=0, group='global', confirm_=false}={}) {\n  if (_THROTTLE_GROUPS[group]) {\n    clearTimeout(_THROTTLE_GROUPS[group])\n    _THROTTLE_GROUPS[group] = null\n  }\n\n  _THROTTLE_GROUPS[group] = setTimeout(function () {\n      if (confirm_ === false) {\n        func()\n      } else {\n        const confirmed = confirm(confirm_)\n        if (confirmed === true) {\n          func()\n        }\n      }\n      _THROTTLE_GROUPS[group] = null\n    }, delay)\n}\n\nexport let cancelThrottle = function(group) {\n  if (_THROTTLE_GROUPS[group]) {\n    clearTimeout(_THROTTLE_GROUPS[group])\n    _THROTTLE_GROUPS[group] = null\n  }\n}\n\n// Internal\n\nconst require_ = function(module) {\n  try {\n    return require(module)\n  } catch(e) {\n    return false\n  }\n}\n\nconst resolvePath = function(path) {\n  const parts = path.split(\".\")\n  let i = -1, obj = null\n  for (let part of parts) {\n    i++\n    if (i === 0) {\n      if (window[part] !== undefined) obj = window[part]\n      else if (obj = require_(part)) null\n      else if (obj = require_(\"./\" + part)) null\n      else throw \"Could not resolve path: \" + path\n    } else {\n      if (obj[part] !== undefined) {\n        try {\n          obj = obj[part].bind(obj)\n        } catch(e) {\n          obj = obj[part]\n        }\n      }\n      else throw \"Could not resolve path: \" + path\n    }\n  }\n  return obj\n}\n\nconst applyCommand = function(path, ...args) {\n  console.log(\"apply command\", path, args)\n  let rpath = resolvePath(path)\n  rpath(...args)\n  const event = new CustomEvent('hypergen.applyCommand.after', {detail: {path, args}})\n  document.dispatchEvent(event)\n}\n\n// TODO: Dont clutter window.\nwindow.e = function(event, callbackKey, eventMatches) {\n  event.preventDefault()\n  event.stopPropagation()\n  if (!!eventMatches) {\n    for (const k in eventMatches) {\n      if (eventMatches[k] !== event[k]) {\n        return\n      }\n    }\n  }\n  applyCommand(...window.clientState.hypergen.eventHandlerCallbacks[callbackKey])\n}\n\nconst applyCommands = function(commands) {\n  for (let [path, ...args] of commands) {\n    applyCommand(path, ...args)\n  }\n}\n// TODO: Dont clutter window.\nwindow.applyCommands = applyCommands\n\nconst mergeAttrs = function(target, source){\n  source.getAttributeNames().forEach(name => {\n    let value = source.getAttribute(name)\n    target.setAttribute(name, value)\n  })\n}\n\nconst MISSING_ELEMENT_EXCEPTION = \"MISSING_ELEMENT_EXCEPTION\" \n\n// coerce functions\nexport const coerce = {}\ncoerce.no = function(value) {\n  if (value === \"\") return null\n  return value\n}\ncoerce.str = function(value) {\n  if (value === \"\") return null\n  return value === null ? null : \"\" + value\n}\ncoerce.int = function(value) {\n  if (value === \"\") return null\n  value = parseInt(value)\n  if (isNaN(value)) return null\n  else return value\n}\ncoerce.float = function(value) {\n  if (value === \"\") return null\n  value = parseFloat(value)\n  if (isNaN(value)) return null\n  else return {_: [\"float\", value]}\n}\ncoerce.date = function(value) {\n  if (value === \"\") return null\n  else return {_: [\"date\", value]}\n}\ncoerce.datetime = function(value) {\n  if (value === \"\") return null\n  else return {_: [\"datetime\", value]}\n}\ncoerce.time = function(value) {\n  if (value === \"\") return null\n  else return {_: [\"time\", value]}\n}\ncoerce.month = function(value) {\n  if (value === \"\") return null\n  const parts = value.split(\"-\")\n  return {year: parseInt(parts[0]), month: parseInt(parts[1])}\n}\ncoerce.week = function(value) {\n  if (value === \"\") return null\n  const parts = value.split(\"-\")\n  return {year: parseInt(parts[0]), week: parseInt(parts[1].replace(\"W\", \"\"))}\n}\n\n\n// DOM element value readers\nexport const read = {}\nread.value = function(id) { // value attribute\n  const el = document.getElementById(id)\n  if (el === null) {\n    throw MISSING_ELEMENT_EXCEPTION\n  }\n  return el.value.trim()\n}\nread.checked = function(id) { // checkbox\n  const el = document.getElementById(id)\n  if (el === null) {\n    throw MISSING_ELEMENT_EXCEPTION\n  }\n  return el.checked\n}\nread.radio = function(id) { // radio button. Uses name attribute for value.\n  const el = document.getElementById(id)\n  if (el === null) {\n    throw MISSING_ELEMENT_EXCEPTION\n  }\n  const checked = document.querySelector(\"input[type=radio][name=\" + el.name + \"]:checked\")\n  return checked === null ? null : checked.value\n}\nread.file = function(id, formData) { // file upload\n  const el = document.getElementById(id)\n  if (el === null) {\n    throw MISSING_ELEMENT_EXCEPTION\n  }\n  if (el.files.length !== 1) return null\n  if (window.hypergenUploadFiles === true) formData.append(id, el.files[0])\n  return el.files[0].name\n}\n\nexport const element = function(valueFunc, coerceFunc, id) {\n  this.toJSON = function() {\n    const value = resolvePath(valueFunc)(id, window.hypergenGlobalFormdata)\n    if (!!coerceFunc) return resolvePath(coerceFunc)(value)\n    else return coerce.no(value)\n  }\n  return this\n}\n\nconst reviver = function(k, v) {\n  if (Array.isArray(v)) {\n    if (v.length === 3 && v[0] === \"_\") {\n      if(v[1] === \"element_value\") {\n        return new element(...v[2])\n      }\n    }\n  }\n  return v\n}\n// TODO: Dont clutter window.\nwindow.reviver = reviver\n\nconst getCookie = function(name) {\n    let cookieValue = null;\n    if (document.cookie && document.cookie !== '') {\n        const cookies = document.cookie.split(';');\n        for (let i = 0; i < cookies.length; i++) {\n            const cookie = cookies[i].trim();\n            // Does this cookie string begin with the name we want?\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                break;\n            }\n        }\n    }\n    return cookieValue;\n}\n\nfunction addParams(url, params) {\n  const ret = []\n  for (let d in params)\n    ret.push(encodeURIComponent(d) + '=' + encodeURIComponent(params[d]))\n  if (ret.length === 0) return url\n  else return url + \"?\" + ret.join('&')\n}\n\nexport const post = function(url, formData, onSuccess, onError, params, headers) {\n  url = addParams(url, params)\n  \n  const xhr = new XMLHttpRequest()\n  const progressBar = document.getElementById(\"hypergen-upload-progress-bar\")\n\n  if (progressBar !== null) {\n    xhr.upload.onload = () => {\n      progressBar.style.visibility = \"hidden\"\n      console.log(`The upload is completed: ${xhr.status} ${xhr.response}`)\n    }\n\n    xhr.upload.onerror = () => {\n      progressBar.style.visibility = \"hidden\"\n      console.error('Upload failed.')\n\n    }\n\n    xhr.upload.onabort = () => {\n      progressBar.style.visibility = \"hidden\"\n      console.error('Upload cancelled.')\n    }\n\n    xhr.upload.onprogress = (event) => {\n      progressBar.style.visibility = \"visible\"\n      progressBar.value = event.loaded / event.total\n      console.log(`Uploaded ${event.loaded} of ${event.total} bytes`)\n    }\n  }\n\n  xhr.onload = () => {\n    var jsonOk = false,\n        data = null\n    try {\n      data = JSON.parse(xhr.responseText, reviver)\n      jsonOk = true\n    } catch(e) {\n      data = xhr.responseText\n      jsonOk = false\n    }\n    if (xhr.readyState == 4 && xhr.status == 200) {\n      onSuccess(data, xhr)\n    } else {\n      onError(data, jsonOk, xhr);\n    }\n  }\n\n  // TODO\n  xhr.onerror = () => {\n    onError()\n  }\n\n  xhr.onabort = () => {\n    console.error('xhr aborted')\n  }\n\n  xhr.open('POST', url)\n  xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n  xhr.setRequestHeader('X-Pathname', parent.window.location.pathname);\n  xhr.setRequestHeader('X-CSRFToken', getCookie('csrftoken'));\n  if (!!headers) {\n    for (let k in headers) {\n      xhr.setRequestHeader(k, headers[k]);\n    }\n  }\n  xhr.send(formData)\n}\n\n// history support.\n\nwindow.addEventListener(\"popstate\", function(event) {\n  if (event.state && event.state.callback_url !== undefined) {\n    callback(event.state.callback_url, [], {meta: {is_popstate: true}, headers: {HYPERGEN_POPSTATE: 1}})\n  } else {\n    window.location = location.href\n  }\n})\n\nconst pushstate = new Event('hypergen.pushstate')\n\nexport const onpushstate = function() {\n  document.dispatchEvent(pushstate)\n}\n\n// Translations\nconst replaceInText = function(element, pattern, replacement) {\n  if (element === null) element = document.querySelector(\"body\")\n  \n  for (let node of element.childNodes) {\n    switch (node.nodeType) {\n      case Node.ELEMENT_NODE:\n        replaceInText(node, pattern, replacement);\n        break;\n      case Node.TEXT_NODE:\n        node.textContent = node.textContent.replace(pattern, replacement);\n        break;\n      case Node.DOCUMENT_NODE:\n        replaceInText(node, pattern, replacement);\n    }\n  }\n}\n\nconst translations = function(url, T) {\n  // TODO: Dont clutter window.\n  window.t = {T}\n  \n  window.t.post = function(a, b, b0) {\n    let form = new FormData()\n    form.append(\"hypergen_data\", JSON.stringify({args: [a, b], meta: {}}))\n    console.log(\"Translating\", JSON.stringify(a), \"to\", JSON.stringify(b))\n    post(\n      url,\n      form,\n      () => { replaceInText(null, b0, (b === \"RESET\" ? a : b)); console.log(\"Server said, THANKYOUSE!\") },\n      () => { alert(\"Something went wrong when posting translation string to server.\")},\n      {},\n    )\n  }\n  \n  window.t.help = function() {\n    console.log(`Hi user, you have the following commands:\n\n    t.list() // Shows all translatable strings on this page and their reference number\n    t.translate() // Runs t.list and then prompts for reference number and then translation.\n\nUse \"RESET\" to reset back to the original content.\n      `)\n  }\n\n  var stringsOnPage = function() {\n    var html = document.body.innerHTML\n    return T.filter(x => html.includes(x[1]))\n  }\n  \n  window.t.list = function() {\n    var xs = stringsOnPage()\n    console.log(\"I found the following translatable strings on this page:\\n\\n\" + xs.map(\n      (x, i) => `${i}: ${x[0]}`).join(\"\\n\"))\n  }\n  window.t.translate = function() {\n    var xs = stringsOnPage()\n    window.t.list()\n    i = Number(prompt(\"Which number string do you want to translate?\"))\n    if (i != 0 && !i) {\n      console.error(\"Dont know that number\", i, \"try again!\")\n      return\n    }\n    var x = xs[i]\n    if (!x) {\n      console.error(\"Dont know that number\", i, \"try again!\")\n      return\n    }\n  \n    var b = prompt(\"Input translation for: \\n\\n    '\" + x[1] + \"'\", x[1])\n    if (!b || b.trim() === \"\") {\n      console.error(\"You did not write anything. Try again!\")\n      return\n    }\n    window.t.post(x[0], b, x[1])\n  }\n}\n// TODO: Dont clutter window.\nwindow.translations = translations\n\n// On ready\n\nexport const ready = function(fn, {partial=false}={}) {\n  if (document.readyState != 'loading') {\n    fn();\n  } else if (document.addEventListener) {\n    document.addEventListener('DOMContentLoaded', fn);\n  } else {\n    document.attachEvent('onreadystatechange', function() {\n      if (document.readyState != 'loading')\n        fn();\n    });\n  }\n  if (partial) document.addEventListener(\"hypergen.pushstate\", fn)\n}\n// TODO: Dont clutter window.\nwindow.ready = ready\n"]}